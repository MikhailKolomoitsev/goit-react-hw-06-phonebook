{"version":3,"sources":["redux/types.js","redux/actions.js","components/Form/Form.jsx","components/ListContacts/ListContacts.jsx","components/Filter/Filter.jsx","App.jsx","redux/reducer.js","redux/store.jsx","index.js"],"names":["name","number","type","types","payload","id","uuidv4","value","connect","dispatch","onSubmit","actions","useState","setName","setNumber","nameInputId","numberInputID","e","preventDefault","htmlFor","pattern","title","required","onChange","currentTarget","filteredContactList","fullList","filter","filterValueNorm","toLowerCase","contact","includes","contacts","items","onClick","ations","map","state","target","App","className","initialState","JSON","parse","window","localStorage","getItem","combineReducers","dataLowerCase","itemToFind","find","alert","rootReducer","reducer","store","createStore","composeWithDevTools","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c6fcb3c9.chunk.js","sourcesContent":["// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  ADD: \"contacts/add\",\r\n  DELETE: \"contacts/delete\",\r\n  CHANGE_FILTER: \"contacts/changeFilter\",\r\n};\r\n","import types from \"./types\";\nimport { v4 as uuidv4 } from \"uuid\";\n\nconst addContact = ({ name, number }) => ({\n  type: types.ADD,\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n});\n\nconst deleteContact = (id) => ({\n  type: types.DELETE,\n  payload: id,\n});\n\nconst changeFilter = (value) => ({\n  type: types.CHANGE_FILTER,\n  payload: value,\n});\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, changeFilter };\n","import React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\"\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../redux/actions\";\r\n\r\nfunction Form({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n\r\n  const nameInputId = uuidv4();\r\n  const numberInputID = uuidv4();\r\n\r\n  const handleNameChange = (e) => {\r\n    setName(e.currentTarget.value);\r\n  };\r\n  const handleNumberChange = (e) => {\r\n    setNumber(e.currentTarget.value);\r\n  };\r\n\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    onSubmit({ id: uuidv4(), name: name, number: number });\r\n    setName(\"\");\r\n    setNumber(\"\");\r\n  };\r\n\r\n\r\n  return (\r\n    <form type=\"submit\" onSubmit={handleSubmit}>\r\n      <label htmlFor={nameInputId}>\r\n        Name\r\n        <input\r\n          value={name}\r\n          id={nameInputId}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleNameChange}\r\n        />\r\n      </label>\r\n      <label htmlFor={numberInputID}>\r\n        Number\r\n        <input\r\n          value={number}\r\n          id={numberInputID}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleNumberChange}\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  );\r\n}\r\n\r\nconst mapDispatchToProrps = (dispatch) => ({\r\n  onSubmit: (name, number) =>\r\n    dispatch(actions.addContact(name, number)),\r\n});\r\nexport default connect(null, mapDispatchToProrps)(Form);","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport ations from '../../redux/actions'\r\n\r\n\r\nfunction ListContacts({ contacts, onClick }) {\r\n\r\n  return (<ul>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        {name} {number}\r\n        <button onClick={() => onClick(id)} type=\"button\">\r\n          delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\nListContacts.propTypes = {\r\n  contacts: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array,\r\n  ]),\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nconst filteredContactList = (fullList, filter) => {\r\n  const filterValueNorm = filter.toLowerCase();\r\n  return fullList.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filterValueNorm)\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: filteredContactList(items, filter)\r\n})\r\nconst mapDispatchTooProps = dispatch => ({\r\n  onClick: (id) => dispatch(ations.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchTooProps)(ListContacts)","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../redux/actions\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  const id = uuidv4();\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>   </label>\r\n      <input id={id} type=\"text\" value={value} onChange={onChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: (e) => dispatch(actions.changeFilter(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Form from \"./components/Form/Form\";\r\nimport ListContacts from \"./components/ListContacts/ListContacts\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>Phonebook</h3>\r\n      <Form />\r\n      <h3>Contacts</h3>\r\n      <p>filter via name</p>\r\n      <Filter />\r\n      <ListContacts />\r\n    </div>\r\n  )\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\nimport types from \"./types\";\nconst initialState = JSON.parse(window.localStorage.getItem(\"contacts\")) ?? [];\nconst items = (state = initialState, { type, payload }) => {\n  switch (type) {\n    case types.ADD:\n      const dataLowerCase = payload.name.toLowerCase();\n      const itemToFind = state.find(\n        (contact) => contact.name.toLowerCase() === dataLowerCase\n      );\n      if (itemToFind) {\n        alert(`${itemToFind.name} is already in contacts`);\n        return state;\n      } else {\n        return [...state, payload];\n      }\n\n    case types.DELETE:\n      return state.filter(({ id }) => id !== payload);\n    default:\n      return state;\n  }\n};\n\nconst filter = (state = \"\", { type, payload }) => {\n  switch (type) {\n    case types.CHANGE_FILTER:\n      return payload;\n    default:\n      return state;\n  }\n};\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import { createStore, combineReducers } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\nimport reducer from './reducer'\r\n\r\nconst rootReducer = combineReducers({\r\n    contacts: reducer\r\n})\r\n\r\nconst store = createStore(rootReducer, composeWithDevTools())\r\nexport default store","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}