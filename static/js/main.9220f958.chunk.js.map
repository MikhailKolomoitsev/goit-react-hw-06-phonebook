{"version":3,"sources":["redux/actions.js","components/Form/Form.jsx","components/ListContacts/ListContacts.jsx","components/Filter/Filter.jsx","App.jsx","redux/reducer.js","redux/store.jsx","index.js"],"names":["addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","connect","dispatch","onSubmit","obj","actions","useState","setName","setNumber","type","e","preventDefault","value","pattern","title","required","onChange","currentTarget","filteredContactList","fullList","filter","filterValueNorm","toLowerCase","contact","includes","contacts","items","onClick","ations","map","state","target","htmlFor","App","className","initialState","JSON","parse","window","localStorage","getItem","createReducer","dataLowerCase","itemToFind","find","alert","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.9220f958.chunk.js","sourcesContent":["import { v4 as uuidv4 } from \"uuid\";\nimport { createAction } from \"@reduxjs/toolkit\";\n\nconst addContact = createAction(\"contacts/add\", ({ name, number }) => ({\n  payload: {\n    id: uuidv4(),\n    name,\n    number,\n  },\n}));\n// const addContact = ({ name, number }) => ({\n//   type: types.ADD,\n//   payload: {\n//     id: uuidv4(),\n//     name,\n//     number,\n//   },\n// });\n\nconst deleteContact = createAction(\"contacts/delete\");\n// const deleteContact = (id) => ({\n//   type: types.DELETE,\n//   payload: id,\n// });\n\nconst changeFilter = createAction(\"contacts/changeFilter\");\n// const changeFilter = (value) => ({\n//   type: types.CHANGE_FILTER,\n//   payload: value,\n// });\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default { addContact, deleteContact, changeFilter };\n","import React, { useState } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport actions from '../../redux/actions'\r\n\r\nfunction Form({ onSubmit }) {\r\n  const [name, setName] = useState('')\r\n  const [number, setNumber] = useState('')\r\n  const handleNameChange = (e) => setName(e.currentTarget.value)\r\n  const handleNumberChange = (e) => setNumber(e.currentTarget.value)\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault()\r\n    onSubmit({ name, number })\r\n    setName('')\r\n    setNumber('')\r\n  }\r\n  return (\r\n    <form type=\"submit\" onSubmit={handleSubmit}>\r\n      <label>\r\n        Name\r\n        <input\r\n          value={name}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          onChange={handleNameChange}\r\n        />\r\n      </label>\r\n      <label>\r\n        Number\r\n        <input\r\n          value={number}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          onChange={handleNumberChange}\r\n        />\r\n      </label>\r\n      <button type=\"submit\">Add contact</button>\r\n    </form>\r\n  )\r\n}\r\nconst mapDispatchToProrps = (dispatch) => ({\r\n  onSubmit: (obj) => dispatch(actions.addContact(obj)),\r\n})\r\nexport default connect(null, mapDispatchToProrps)(Form)","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport ations from '../../redux/actions'\r\n\r\n\r\nfunction ListContacts({ contacts, onClick }) {\r\n\r\n  return (<ul>\r\n    {contacts.map(({ id, name, number }) => (\r\n      <li key={id}>\r\n        {name} {number}\r\n        <button onClick={() => onClick(id)} type=\"button\">\r\n          delete\r\n        </button>\r\n      </li>\r\n    ))}\r\n  </ul>)\r\n}\r\n\r\nListContacts.propTypes = {\r\n  contacts: PropTypes.oneOfType([\r\n    PropTypes.string,\r\n    PropTypes.number,\r\n    PropTypes.array,\r\n  ]),\r\n  onClick: PropTypes.func.isRequired,\r\n};\r\n\r\nconst filteredContactList = (fullList, filter) => {\r\n  const filterValueNorm = filter.toLowerCase();\r\n  return fullList.filter((contact) =>\r\n    contact.name.toLowerCase().includes(filterValueNorm)\r\n  );\r\n}\r\n\r\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\r\n  contacts: filteredContactList(items, filter)\r\n})\r\nconst mapDispatchTooProps = dispatch => ({\r\n  onClick: (id) => dispatch(ations.deleteContact(id))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchTooProps)(ListContacts)","import React from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport actions from \"../../redux/actions\";\r\n\r\nconst Filter = ({ value, onChange }) => {\r\n  const id = uuidv4();\r\n  return (\r\n    <>\r\n      <label htmlFor={id}>   </label>\r\n      <input id={id} type=\"text\" value={value} onChange={onChange} />\r\n    </>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  onChange: (e) => dispatch(actions.changeFilter(e.target.value))\r\n})\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import \"./App.css\";\r\nimport React, { useState, useEffect } from \"react\";\r\nimport Form from \"./components/Form/Form\";\r\nimport ListContacts from \"./components/ListContacts/ListContacts\";\r\nimport Filter from \"./components/Filter/Filter\";\r\n\r\nexport default function App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <h3>Phonebook</h3>\r\n      <Form />\r\n      <h3>Contacts</h3>\r\n      <p>filter via name</p>\r\n      <Filter />\r\n      <ListContacts />\r\n    </div>\r\n  )\r\n}\r\n\r\n","import { combineReducers } from \"redux\";\nimport { createReducer } from \"@reduxjs/toolkit\";\nimport actions from \"./actions\";\n\nconst initialState = JSON.parse(window.localStorage.getItem(\"contacts\")) ?? [];\nconst items = createReducer(initialState, {\n  [actions.addContact]: (state, { payload }) => {\n    const dataLowerCase = payload.name.toLowerCase();\n    const itemToFind = state.find(\n      (contact) => contact.name.toLowerCase() === dataLowerCase\n    );\n    if (itemToFind) {\n      alert(`Ty SHo, ${itemToFind.name} is already in contacts`);\n      return state;\n    } else {\n      return [...state, payload];\n    }\n  },\n  [actions.deleteContact]: (state, { payload }) => {\n    return state.filter(({ id }) => id !== payload);\n  },\n});\n\nconst filter = createReducer(\"\", {\n  [actions.changeFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n","import {\r\n  configureStore,\r\n  getDefaultMiddleware,\r\n} from '@reduxjs/toolkit'\r\nimport reducer from './reducer'\r\nimport logger from 'redux-logger'\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist'\r\nimport storage from 'redux-persist/lib/storage'\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n]\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n}\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, reducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n})\r\n\r\nconst persistor = persistStore(store)\r\n\r\nexport default { store, persistor }\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App.jsx\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\nimport { PersistGate } from \"redux-persist/integration/react\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={\"...Loading\"} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}